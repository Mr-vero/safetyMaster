#!/bin/bash
# SafetyMaster Pro - User-Friendly Mac App Launcher
# Provides proper GUI interface instead of floating in background

# Get the app bundle directory - Fixed path resolution
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
APP_DIR="$( cd "$SCRIPT_DIR/../.." && pwd )"
RESOURCES_DIR="$APP_DIR/Contents/Resources"

# Function to show error dialog
show_error() {
    osascript -e "display dialog \"$1\" with title \"SafetyMaster Pro - Error\" buttons {\"OK\"} default button \"OK\" with icon caution"
}

# Check if resources directory exists
if [[ ! -d "$RESOURCES_DIR" ]]; then
    show_error "Resources directory not found at: $RESOURCES_DIR

This might be due to:
- Incomplete app bundle
- Incorrect installation
- File permissions

Please re-download SafetyMaster Pro."
    exit 1
fi

# Change to resources directory
cd "$RESOURCES_DIR" || {
    show_error "Failed to access application resources at: $RESOURCES_DIR

Please check file permissions and try again."
    exit 1
}

# Detect Python installation with multiple fallbacks
PYTHON_CMD=""

# Check for various Python installations in order of preference
for cmd in python3.11 python3.10 python3.9 python3.8 python3 python; do
    if command -v "$cmd" &> /dev/null; then
        # Verify it's Python 3.8+
        version=$("$cmd" -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')" 2>/dev/null || echo "0.0")
        if command -v bc &> /dev/null; then
            # Use bc if available
            if [[ $(echo "$version >= 3.8" | bc -l 2>/dev/null || echo "0") == "1" ]]; then
                PYTHON_CMD="$cmd"
                break
            fi
        else
            # Fallback comparison without bc
            major=$(echo "$version" | cut -d. -f1)
            minor=$(echo "$version" | cut -d. -f2)
            if [[ "$major" -gt 3 ]] || [[ "$major" -eq 3 && "$minor" -ge 8 ]]; then
                PYTHON_CMD="$cmd"
                break
            fi
        fi
    fi
done

# If no suitable Python found, provide installation guidance
if [[ -z "$PYTHON_CMD" ]]; then
    show_error "Python 3.8+ is required but not found.

Installation options:

1. Official Python (Recommended):
   Download from: https://www.python.org/downloads/macos/

2. Homebrew (if installed):
   brew install python3

3. Xcode Command Line Tools:
   xcode-select --install

After installation, restart this application."
    exit 1
fi

# Check if we're in a virtual environment, if not try to create one
if [[ -z "$VIRTUAL_ENV" ]]; then
    VENV_DIR="$HOME/.safetymaster_venv"
    
    if [[ ! -d "$VENV_DIR" ]]; then
        # Show progress dialog
        osascript -e 'display dialog "Setting up SafetyMaster Pro for first use...\n\nThis may take a few minutes." with title "SafetyMaster Pro - Setup" buttons {"OK"} default button "OK" with icon note giving up after 3'
        
        "$PYTHON_CMD" -m venv "$VENV_DIR" || {
            echo "Warning: Could not create virtual environment, using system Python"
        }
    fi
    
    if [[ -d "$VENV_DIR" ]]; then
        source "$VENV_DIR/bin/activate"
        PYTHON_CMD="python"
    fi
fi

# Install/upgrade dependencies with progress indication
if [[ ! -f "$HOME/.safetymaster_deps_installed" ]]; then
    osascript -e 'display dialog "Installing required dependencies...\n\nThis is a one-time setup." with title "SafetyMaster Pro - Installing" buttons {"OK"} default button "OK" with icon note giving up after 3'
    
    "$PYTHON_CMD" -m pip install --upgrade pip setuptools wheel > /dev/null 2>&1 || true
    
    # Install requirements with fallback options
    if "$PYTHON_CMD" -m pip install -r requirements.txt > /dev/null 2>&1; then
        touch "$HOME/.safetymaster_deps_installed"
    elif "$PYTHON_CMD" -m pip install --user -r requirements.txt > /dev/null 2>&1; then
        touch "$HOME/.safetymaster_deps_installed"
    else
        show_error "Failed to install required dependencies.

Please try installing manually:
1. Open Terminal
2. Run: pip3 install opencv-python ultralytics flask flask-socketio torch torchvision

Then restart SafetyMaster Pro."
        exit 1
    fi
fi

# Install tkinter if not available (for GUI)
"$PYTHON_CMD" -c "import tkinter" 2>/dev/null || {
    show_error "GUI components not available.

Please install tkinter:
1. If using Homebrew Python: brew install python-tk
2. If using system Python: Install from python.org

Then restart SafetyMaster Pro."
    exit 1
}

# Launch the GUI application
"$PYTHON_CMD" gui_launcher.py
